{"ast":null,"code":"var _jsxFileName = \"/Users/prathikranganathagowda/Desktop/WeCureIt/frontend/src/DoctorGrid.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport DoctorCard from './DoctorCard';\nimport AddDoctorForm from './AddDoctorForm';\nimport Modal from './Modal'; // Assuming you have a Modal component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DoctorGrid() {\n  _s();\n  const [selectedDoctor, setSelectedDoctor] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  // Sample doctors data with updated structure to support multiple specialties\n  const doctors = [{\n    name: 'Dr. Richard James',\n    specialty: ['General Physician', 'Cardiologist', 'Dermatologist'],\n    // Multiple specialties\n    email: 'richard@example.com',\n    degree: 'MD',\n    experience: '10 years'\n  }, {\n    name: 'Dr. Emily Larson',\n    specialty: ['Gynecologist'],\n    // Single specialty\n    email: 'emily.larson@hospital.com',\n    degree: 'MD',\n    experience: '8 years'\n  }, {\n    name: 'Dr. Sarah Patel',\n    specialty: ['Dermatologist'],\n    email: 'sarah.patel@hospital.com',\n    degree: 'MD, Dermatology',\n    experience: '5 years'\n  }, {\n    name: 'Dr. Christopher Lee',\n    specialty: ['Pediatrician'],\n    email: 'christopher.lee@hospital.com',\n    degree: 'MBBS, Pediatrics',\n    experience: '12 years'\n  }, {\n    name: 'Dr. Jennifer Garcia',\n    specialty: ['Neurologist'],\n    email: 'jennifer.garcia@hospital.com',\n    degree: 'MD, Neurology',\n    experience: '6 years'\n  }, {\n    name: 'Dr. Andrew Williams',\n    specialty: ['Gastroenterologist'],\n    email: 'andrew.williams@hospital.com',\n    degree: 'MD, Gastroenterology',\n    experience: '7 years'\n  }, {\n    name: 'Dr. Jeffrey King',\n    specialty: ['Pediatrician'],\n    email: 'jeffrey.king@hospital.com',\n    degree: 'MBBS, Pediatrics',\n    experience: '9 years'\n  }, {\n    name: 'Dr. Zoe Kelly',\n    specialty: ['Neurologist', 'Psychiatrist'],\n    // Multiple specialties\n    email: 'zoe.kelly@hospital.com',\n    degree: 'MD, Neurology',\n    experience: '11 years'\n  }, {\n    name: 'Dr. Patrick Harris',\n    specialty: ['Gastroenterologist'],\n    email: 'patrick.harris@hospital.com',\n    degree: 'MD, Gastroenterology',\n    experience: '4 years'\n  }, {\n    name: 'Dr. Chloe Evans',\n    specialty: ['General Physician', 'Dermatologist'],\n    // Multiple specialties\n    email: 'chloe.evans@hospital.com',\n    degree: 'MBBS',\n    experience: '6 years'\n  }, {\n    name: 'Dr. Ryan Martinez',\n    specialty: ['Gynecologist'],\n    email: 'ryan.martinez@hospital.com',\n    degree: 'MD, Gynecology',\n    experience: '8 years'\n  }, {\n    name: 'Dr. Amelia Hill',\n    specialty: ['Dermatologist'],\n    email: 'amelia.hill@hospital.com',\n    degree: 'MD, Dermatology',\n    experience: '5 years'\n  }];\n  const handleEdit = doctor => {\n    setSelectedDoctor(doctor);\n    setIsModalOpen(true);\n  };\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n    setSelectedDoctor(null);\n  };\n  const handleSaveDoctor = updatedDoctor => {\n    console.log('Updated doctor:', updatedDoctor);\n    // Update the doctor in your list here (in a real app, you would update the state)\n    setIsModalOpen(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"mt-8\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"text-xl font-medium mb-6\",\n      children: \"All Doctors\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-4 gap-6\",\n      children: doctors.map((doctor, index) => /*#__PURE__*/_jsxDEV(DoctorCard, {\n        name: doctor.name,\n        specialty: doctor.specialty.join(', ') // Display specialties as a comma-separated string\n        ,\n        email: doctor.email,\n        degree: doctor.degree,\n        experience: doctor.experience,\n        onEdit: () => handleEdit(doctor) // Pass the doctor details to the edit function\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), isModalOpen && /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen,\n      onClose: handleCloseModal,\n      children: /*#__PURE__*/_jsxDEV(AddDoctorForm, {\n        doctor: selectedDoctor,\n        onSave: handleSaveDoctor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n}\n_s(DoctorGrid, \"kqq6kKOVVncGXLqVRfQyClHnitU=\");\n_c = DoctorGrid;\nexport default DoctorGrid;\nvar _c;\n$RefreshReg$(_c, \"DoctorGrid\");","map":{"version":3,"names":["React","useState","DoctorCard","AddDoctorForm","Modal","jsxDEV","_jsxDEV","DoctorGrid","_s","selectedDoctor","setSelectedDoctor","isModalOpen","setIsModalOpen","doctors","name","specialty","email","degree","experience","handleEdit","doctor","handleCloseModal","handleSaveDoctor","updatedDoctor","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","join","onEdit","isOpen","onClose","onSave","_c","$RefreshReg$"],"sources":["/Users/prathikranganathagowda/Desktop/WeCureIt/frontend/src/DoctorGrid.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport DoctorCard from './DoctorCard';\nimport AddDoctorForm from './AddDoctorForm';\nimport Modal from './Modal'; // Assuming you have a Modal component\n\nfunction DoctorGrid() {\n  const [selectedDoctor, setSelectedDoctor] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  // Sample doctors data with updated structure to support multiple specialties\n  const doctors = [\n    {\n      name: 'Dr. Richard James',\n      specialty: ['General Physician', 'Cardiologist','Dermatologist'],  // Multiple specialties\n      email: 'richard@example.com',\n      degree: 'MD',\n      experience: '10 years',\n    },\n    {\n      name: 'Dr. Emily Larson',\n      specialty: ['Gynecologist'],  // Single specialty\n      email: 'emily.larson@hospital.com',\n      degree: 'MD',\n      experience: '8 years',\n    },\n    {\n      name: 'Dr. Sarah Patel',\n      specialty: ['Dermatologist'],\n      email: 'sarah.patel@hospital.com',\n      degree: 'MD, Dermatology',\n      experience: '5 years',\n    },\n    {\n      name: 'Dr. Christopher Lee',\n      specialty: ['Pediatrician'],\n      email: 'christopher.lee@hospital.com',\n      degree: 'MBBS, Pediatrics',\n      experience: '12 years',\n    },\n    {\n      name: 'Dr. Jennifer Garcia',\n      specialty: ['Neurologist'],\n      email: 'jennifer.garcia@hospital.com',\n      degree: 'MD, Neurology',\n      experience: '6 years',\n    },\n    {\n      name: 'Dr. Andrew Williams',\n      specialty: ['Gastroenterologist'],\n      email: 'andrew.williams@hospital.com',\n      degree: 'MD, Gastroenterology',\n      experience: '7 years',\n    },\n    {\n      name: 'Dr. Jeffrey King',\n      specialty: ['Pediatrician'],\n      email: 'jeffrey.king@hospital.com',\n      degree: 'MBBS, Pediatrics',\n      experience: '9 years',\n    },\n    {\n      name: 'Dr. Zoe Kelly',\n      specialty: ['Neurologist', 'Psychiatrist'],  // Multiple specialties\n      email: 'zoe.kelly@hospital.com',\n      degree: 'MD, Neurology',\n      experience: '11 years',\n    },\n    {\n      name: 'Dr. Patrick Harris',\n      specialty: ['Gastroenterologist'],\n      email: 'patrick.harris@hospital.com',\n      degree: 'MD, Gastroenterology',\n      experience: '4 years',\n    },\n    {\n      name: 'Dr. Chloe Evans',\n      specialty: ['General Physician', 'Dermatologist'],  // Multiple specialties\n      email: 'chloe.evans@hospital.com',\n      degree: 'MBBS',\n      experience: '6 years',\n    },\n    {\n      name: 'Dr. Ryan Martinez',\n      specialty: ['Gynecologist'],\n      email: 'ryan.martinez@hospital.com',\n      degree: 'MD, Gynecology',\n      experience: '8 years',\n    },\n    {\n      name: 'Dr. Amelia Hill',\n      specialty: ['Dermatologist'],\n      email: 'amelia.hill@hospital.com',\n      degree: 'MD, Dermatology',\n      experience: '5 years',\n    },\n  ];\n\n  const handleEdit = (doctor) => {\n    setSelectedDoctor(doctor);\n    setIsModalOpen(true);\n  };\n\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n    setSelectedDoctor(null);\n  };\n\n  const handleSaveDoctor = (updatedDoctor) => {\n    console.log('Updated doctor:', updatedDoctor);\n    // Update the doctor in your list here (in a real app, you would update the state)\n    setIsModalOpen(false);\n  };\n\n  return (\n    <section className=\"mt-8\">\n      <h3 className=\"text-xl font-medium mb-6\">All Doctors</h3>\n      <div className=\"grid grid-cols-4 gap-6\">\n        {doctors.map((doctor, index) => (\n          <DoctorCard\n            key={index}\n            name={doctor.name}\n            specialty={doctor.specialty.join(', ')}  // Display specialties as a comma-separated string\n            email={doctor.email}\n            degree={doctor.degree}\n            experience={doctor.experience}\n            onEdit={() => handleEdit(doctor)} // Pass the doctor details to the edit function\n          />\n        ))}\n      </div>\n\n      {isModalOpen && (\n        <Modal isOpen={isModalOpen} onClose={handleCloseModal}>\n          <AddDoctorForm doctor={selectedDoctor} onSave={handleSaveDoctor} />\n        </Modal>\n      )}\n    </section>\n  );\n}\n\nexport default DoctorGrid;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}