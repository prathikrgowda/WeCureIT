{"ast":null,"code":"var _jsxFileName = \"/Users/prathikranganathagowda/Desktop/CBES-WeCureIt/frontend/src/ProtectedRoute.jsx\";\nimport React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { jwtDecode } from 'jwt-decode'; // To decode JWT and check expiry\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  children\n}) => {\n  const token = localStorage.getItem('authToken'); // Get token from localStorage\n\n  if (!token) {\n    // If no token, redirect to login\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 16\n    }, this);\n  }\n  try {\n    // Decode the token and check expiry\n    const decoded = jwtDecode(token);\n    const currentTime = Date.now() / 1000;\n    if (decoded.exp < currentTime) {\n      // If token is expired, clear it and redirect to login\n      localStorage.removeItem('authToken');\n      return /*#__PURE__*/_jsxDEV(Navigate, {\n        to: \"/login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 20\n      }, this);\n    }\n  } catch (error) {\n    // If token is invalid, redirect to login\n    localStorage.removeItem('authToken'); // Clean up invalid token\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 16\n    }, this);\n  }\n\n  // If token is valid, render the requested component\n  return children;\n};\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","Navigate","jwtDecode","jsxDEV","_jsxDEV","ProtectedRoute","children","token","localStorage","getItem","to","fileName","_jsxFileName","lineNumber","columnNumber","decoded","currentTime","Date","now","exp","removeItem","error","_c","$RefreshReg$"],"sources":["/Users/prathikranganathagowda/Desktop/CBES-WeCureIt/frontend/src/ProtectedRoute.jsx"],"sourcesContent":["import React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { jwtDecode } from 'jwt-decode'; // To decode JWT and check expiry\n\nconst ProtectedRoute = ({ children }) => {\n    const token = localStorage.getItem('authToken'); // Get token from localStorage\n\n    if (!token) {\n        // If no token, redirect to login\n        return <Navigate to=\"/\" />;\n    }\n\n    try {\n        // Decode the token and check expiry\n        const decoded = jwtDecode(token);\n        const currentTime = Date.now() / 1000;\n\n        if (decoded.exp < currentTime) {\n            // If token is expired, clear it and redirect to login\n            localStorage.removeItem('authToken');\n            return <Navigate to=\"/login\" />;\n        }\n    } catch (error) {\n        // If token is invalid, redirect to login\n        localStorage.removeItem('authToken'); // Clean up invalid token\n        return <Navigate to=\"/login\" />;\n    }\n\n    // If token is valid, render the requested component\n    return children;\n};\n\nexport default ProtectedRoute;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,SAAS,QAAQ,YAAY,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,cAAc,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EACrC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;;EAEjD,IAAI,CAACF,KAAK,EAAE;IACR;IACA,oBAAOH,OAAA,CAACH,QAAQ;MAACS,EAAE,EAAC;IAAG;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAC9B;EAEA,IAAI;IACA;IACA,MAAMC,OAAO,GAAGb,SAAS,CAACK,KAAK,CAAC;IAChC,MAAMS,WAAW,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI;IAErC,IAAIH,OAAO,CAACI,GAAG,GAAGH,WAAW,EAAE;MAC3B;MACAR,YAAY,CAACY,UAAU,CAAC,WAAW,CAAC;MACpC,oBAAOhB,OAAA,CAACH,QAAQ;QAACS,EAAE,EAAC;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IACnC;EACJ,CAAC,CAAC,OAAOO,KAAK,EAAE;IACZ;IACAb,YAAY,CAACY,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC;IACtC,oBAAOhB,OAAA,CAACH,QAAQ;MAACS,EAAE,EAAC;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACnC;;EAEA;EACA,OAAOR,QAAQ;AACnB,CAAC;AAACgB,EAAA,GA1BIjB,cAAc;AA4BpB,eAAeA,cAAc;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}