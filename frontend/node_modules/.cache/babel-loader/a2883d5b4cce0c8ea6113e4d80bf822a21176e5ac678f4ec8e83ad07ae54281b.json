{"ast":null,"code":"var _jsxFileName = \"/Users/prathikranganathagowda/Desktop/CBES-WeCureIt/frontend/src/doctorsAdminMode/DoctorGrid.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport CryptoJS from 'crypto-js'; // Import CryptoJS for encryption\nimport DoctorCard from './DoctorCard';\nimport AddDoctorForm from './AddDoctorForm';\nimport Modal from '../components/Modal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DoctorGrid({\n  doctorAdded\n}) {\n  _s();\n  const [doctors, setDoctors] = useState([]);\n  const [selectedDoctor, setSelectedDoctor] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  // Function to fetch doctors from the backend\n  const fetchDoctors = async () => {\n    try {\n      const response = await axios.get('http://localhost:4000/api/doctors');\n      const decryptedDoctors = response.data.map(doctor => {\n        if (doctor.password) {\n          doctor.password = decryptPassword(doctor.password); // Decrypt password before displaying\n        }\n        return doctor;\n      });\n      setDoctors(decryptedDoctors);\n    } catch (error) {\n      console.error(\"Error fetching doctors:\", error);\n    }\n  };\n  useEffect(() => {\n    fetchDoctors();\n  }, [doctorAdded]); // Re-fetch when doctorAdded changes\n\n  const encryptPassword = password => {\n    const secretKey = 'your-secret-key'; // Replace with your actual key\n    return CryptoJS.AES.encrypt(password, secretKey).toString(); // Encrypt password\n  };\n  const decryptPassword = encryptedPassword => {\n    const secretKey = 'your-secret-key'; // Replace with your actual key\n    const bytes = CryptoJS.AES.decrypt(encryptedPassword, secretKey);\n    return bytes.toString(CryptoJS.enc.Utf8); // Decrypt password\n  };\n  const handleEdit = doctor => {\n    setSelectedDoctor(doctor);\n    setIsModalOpen(true);\n  };\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n    setSelectedDoctor(null);\n  };\n  const handleSaveDoctor = async doctorData => {\n    try {\n      // Encrypt password before saving\n      if (doctorData.password) {\n        doctorData.password = encryptPassword(doctorData.password);\n      }\n      if (selectedDoctor) {\n        // Update existing doctor\n        await axios.put(`http://localhost:4000/api/doctors/${selectedDoctor._id}`, doctorData);\n      } else {\n        // Add new doctor\n        await axios.post('http://localhost:4000/api/doctors', doctorData);\n      }\n      fetchDoctors(); // Refresh the list of doctors immediately\n    } catch (error) {\n      console.error(\"Error saving doctor:\", error);\n    } finally {\n      handleCloseModal();\n    }\n  };\n  const handleRemoveDoctor = async doctorId => {\n    try {\n      await axios.delete(`http://localhost:4000/api/doctors/${doctorId}`);\n      fetchDoctors(); // Refresh the list of doctors after deletion\n    } catch (error) {\n      console.error(\"Error removing doctor:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"mt-8\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"text-xl font-medium mb-6\",\n      children: \"All Doctors\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-4 gap-6\",\n      children: doctors.map(doctor => /*#__PURE__*/_jsxDEV(DoctorCard, {\n        doctor: doctor,\n        onEdit: () => handleEdit(doctor),\n        onRemove: () => handleRemoveDoctor(doctor._id)\n      }, doctor._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), isModalOpen && /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen,\n      onClose: handleCloseModal,\n      children: /*#__PURE__*/_jsxDEV(AddDoctorForm, {\n        doctor: selectedDoctor,\n        onSave: handleSaveDoctor,\n        onCancel: handleCloseModal,\n        onDoctorAdded: fetchDoctors // Call fetchDoctors after adding a new doctor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}\n_s(DoctorGrid, \"Td6ZQFFj/0byyWvKpuVBexdztaA=\");\n_c = DoctorGrid;\nexport default DoctorGrid;\nvar _c;\n$RefreshReg$(_c, \"DoctorGrid\");","map":{"version":3,"names":["React","useState","useEffect","axios","CryptoJS","DoctorCard","AddDoctorForm","Modal","jsxDEV","_jsxDEV","DoctorGrid","doctorAdded","_s","doctors","setDoctors","selectedDoctor","setSelectedDoctor","isModalOpen","setIsModalOpen","fetchDoctors","response","get","decryptedDoctors","data","map","doctor","password","decryptPassword","error","console","encryptPassword","secretKey","AES","encrypt","toString","encryptedPassword","bytes","decrypt","enc","Utf8","handleEdit","handleCloseModal","handleSaveDoctor","doctorData","put","_id","post","handleRemoveDoctor","doctorId","delete","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onEdit","onRemove","isOpen","onClose","onSave","onCancel","onDoctorAdded","_c","$RefreshReg$"],"sources":["/Users/prathikranganathagowda/Desktop/CBES-WeCureIt/frontend/src/doctorsAdminMode/DoctorGrid.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport CryptoJS from 'crypto-js'; // Import CryptoJS for encryption\nimport DoctorCard from './DoctorCard';\nimport AddDoctorForm from './AddDoctorForm';\nimport Modal from '../components/Modal';\n\nfunction DoctorGrid({ doctorAdded }) {\n  const [doctors, setDoctors] = useState([]);\n  const [selectedDoctor, setSelectedDoctor] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  // Function to fetch doctors from the backend\n  const fetchDoctors = async () => {\n    try {\n      const response = await axios.get('http://localhost:4000/api/doctors');\n      const decryptedDoctors = response.data.map((doctor) => {\n        if (doctor.password) {\n          doctor.password = decryptPassword(doctor.password); // Decrypt password before displaying\n        }\n        return doctor;\n      });\n      setDoctors(decryptedDoctors);\n    } catch (error) {\n      console.error(\"Error fetching doctors:\", error);\n    }\n  };\n\n  useEffect(() => {\n    fetchDoctors();\n  }, [doctorAdded]); // Re-fetch when doctorAdded changes\n\n  const encryptPassword = (password) => {\n    const secretKey = 'your-secret-key'; // Replace with your actual key\n    return CryptoJS.AES.encrypt(password, secretKey).toString(); // Encrypt password\n  };\n\n  const decryptPassword = (encryptedPassword) => {\n    const secretKey = 'your-secret-key'; // Replace with your actual key\n    const bytes = CryptoJS.AES.decrypt(encryptedPassword, secretKey);\n    return bytes.toString(CryptoJS.enc.Utf8); // Decrypt password\n  };\n\n  const handleEdit = (doctor) => {\n    setSelectedDoctor(doctor);\n    setIsModalOpen(true);\n  };\n\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n    setSelectedDoctor(null);\n  };\n\n  const handleSaveDoctor = async (doctorData) => {\n    try {\n      // Encrypt password before saving\n      if (doctorData.password) {\n        doctorData.password = encryptPassword(doctorData.password);\n      }\n\n      if (selectedDoctor) {\n        // Update existing doctor\n        await axios.put(`http://localhost:4000/api/doctors/${selectedDoctor._id}`, doctorData);\n      } else {\n        // Add new doctor\n        await axios.post('http://localhost:4000/api/doctors', doctorData);\n      }\n      fetchDoctors(); // Refresh the list of doctors immediately\n    } catch (error) {\n      console.error(\"Error saving doctor:\", error);\n    } finally {\n      handleCloseModal();\n    }\n  };\n\n  const handleRemoveDoctor = async (doctorId) => {\n    try {\n      await axios.delete(`http://localhost:4000/api/doctors/${doctorId}`);\n      fetchDoctors(); // Refresh the list of doctors after deletion\n    } catch (error) {\n      console.error(\"Error removing doctor:\", error);\n    }\n  };\n\n  return (\n    <section className=\"mt-8\">\n      <h3 className=\"text-xl font-medium mb-6\">All Doctors</h3>\n      <div className=\"grid grid-cols-4 gap-6\">\n        {doctors.map((doctor) => (\n          <DoctorCard\n            key={doctor._id}\n            doctor={doctor}\n            onEdit={() => handleEdit(doctor)}\n            onRemove={() => handleRemoveDoctor(doctor._id)}\n          />\n        ))}\n      </div>\n\n      {isModalOpen && (\n        <Modal isOpen={isModalOpen} onClose={handleCloseModal}>\n          <AddDoctorForm\n            doctor={selectedDoctor}\n            onSave={handleSaveDoctor}\n            onCancel={handleCloseModal}\n            onDoctorAdded={fetchDoctors} // Call fetchDoctors after adding a new doctor\n          />\n        </Modal>\n      )}\n    </section>\n  );\n}\n\nexport default DoctorGrid;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}